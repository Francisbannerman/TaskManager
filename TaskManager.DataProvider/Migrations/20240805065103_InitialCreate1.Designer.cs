// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskManager.DataProvider;

#nullable disable

namespace TaskManager.DataProvider.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240805065103_InitialCreate1")]
    partial class InitialCreate1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskManager.Infrastructure.PriorityList", b =>
                {
                    b.Property<Guid>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PriorityId");

                    b.HasIndex("UserId");

                    b.ToTable("PriorityList");

                    b.HasData(
                        new
                        {
                            PriorityId = new Guid("1dd9650e-b708-4ef5-8772-44853fb5c91e"),
                            PriorityName = "Urgent"
                        },
                        new
                        {
                            PriorityId = new Guid("0eb13bb3-a682-431b-ba2f-b702cd07142e"),
                            PriorityName = "Important"
                        },
                        new
                        {
                            PriorityId = new Guid("f45713ab-23af-470d-a4ad-9accb2bafea8"),
                            PriorityName = "Urgent & Important"
                        });
                });

            modelBuilder.Entity("TaskManager.Infrastructure.Tasks", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateEnded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskNotes")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("c4383029-e9b2-42a8-b216-814b541490d2"),
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 8, 5, 6, 51, 3, 334, DateTimeKind.Unspecified).AddTicks(7080), new TimeSpan(0, 0, 0, 0, 0)),
                            DateEnded = new DateTimeOffset(new DateTime(2024, 8, 5, 6, 51, 3, 334, DateTimeKind.Unspecified).AddTicks(7080), new TimeSpan(0, 0, 0, 0, 0)),
                            Deadline = new DateTimeOffset(new DateTime(2024, 8, 5, 6, 51, 3, 334, DateTimeKind.Unspecified).AddTicks(7040), new TimeSpan(0, 0, 0, 0, 0)),
                            Position = 0,
                            PriorityId = new Guid("1dd9650e-b708-4ef5-8772-44853fb5c91e"),
                            TaskName = "Sample Task",
                            TaskNotes = "This is a sample task. Feel free to delete anytime"
                        });
                });

            modelBuilder.Entity("TaskManager.Infrastructure.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("db221a5a-db6e-473a-ba5e-088649b6f5cb"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 8, 5, 6, 51, 3, 334, DateTimeKind.Unspecified).AddTicks(7120), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "adminPassword",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TaskManager.Infrastructure.PriorityList", b =>
                {
                    b.HasOne("TaskManager.Infrastructure.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManager.Infrastructure.Tasks", b =>
                {
                    b.HasOne("TaskManager.Infrastructure.PriorityList", "Priorities")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("TaskManager.Infrastructure.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Priorities");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
